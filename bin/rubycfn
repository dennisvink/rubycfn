#!/usr/bin/env ruby

require "erb"
require "fileutils"
require "ostruct"
require "tty-prompt"
require "rubycfn/version"

require_relative "../lib/cli_methods"

# rubocop:disable Style/AndOr
if ARGV.first || (ARGF.filename != "-" or (not STDIN.tty? and not STDIN.closed?)) # rubocop:disable Style/Not
  if ARGV.class == Array && ARGV.first == "stack"
    case ARGV.first
    when "stack"
      puts "Scaffolding will be reintroduced later."
    end
  else
    require "rubycfn"
    require "active_support/concern"
    module RubycfnStack
      if ARGF.filename != "-" or (not STDIN.tty? and not STDIN.closed?) # rubocop:disable Style/Not
        # rubocop:enable Style/AndOr
        contents = []
        ARGF.each_line do |line|
          contents.push(line)
        end
        contents = contents.join("\n")
      else
        raise "File #{ARGV.first} not found!" unless File.file?(ARGV.first)
        contents = File.read(ARGV.first)
      end
      extend ActiveSupport::Concern
      include Rubycfn
      included do
        eval(contents) # rubocop:disable Security/Eval
      end
    end
    cfn = include RubycfnStack # rubocop:disable Style/MixinUsage
    puts cfn.render_template
    exit
  end
end

path = File.expand_path(File.dirname(File.dirname(__FILE__)))
puts rubycfn_banner(Rubycfn::VERSION)
prompt = TTY::Prompt.new

project_name = prompt.ask("Project name?", default: "example") do |q|
  q.validate(/^([a-z0-9]*)$/, "Invalid project name")
end

project_path = project_name + "-rubycfn"

account_id = prompt.ask("AWS Account ID?", default: "1234567890") do |q|
  q.validate(/^([0-9]*)$/, "Invalid account id")
end

region = prompt.select(
  "Select AWS region", aws_regions
)

render_args = {
  account_id: account_id,
  project_name: project_name,
  region: region,
  version: Rubycfn::VERSION
}

FileUtils.mkdir_p project_path

Dir.glob("#{path}/templates/**/*", File::FNM_DOTMATCH).each do |f|
  if File.directory?(f)
    dir = f.gsub("#{path}/templates/","")
    FileUtils.mkdir_p "#{project_path}/#{dir}"
  end
end

Dir.glob("#{path}/templates/**/*", File::FNM_DOTMATCH).each do |f|
  unless File.directory?(f)
    file = f.gsub("#{path}/templates/","")
    contents = render(f, render_args)
    File.open("#{project_path}/#{file}", "w") { |file| file.write(contents) }
  end
end

puts "Setting up Rubycfn #{project_name} project..."
`cd #{project_name}-rubycfn && git init && bundle`
puts "Done!"
